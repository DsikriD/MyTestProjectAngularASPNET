{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet ApplicationTypeComponent = class ApplicationTypeComponent {\n  constructor(http, baseUrl) {\n    this.appTypes = [];\n    this.baseUrl = \"\";\n    this.http = http;\n    this.baseUrl = baseUrl;\n    http.get(baseUrl + 'Type').subscribe(result => {\n      this.appTypes = result;\n    });\n  }\n};\nApplicationTypeComponent = __decorate([Component({\n  selector: 'applicationtype-data',\n  templateUrl: './applicationtype.component.html'\n}), __param(1, Inject('BASE_URL'))], ApplicationTypeComponent);\nexport { ApplicationTypeComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAQ1C,IAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAKnCC,YAAYC,IAAgB,EAAsBC,OAAe;IAJ1D,aAAQ,GAAsB,EAAE;IAEvC,YAAO,GAAW,EAAE;IAGlB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtBD,IAAI,CAACE,GAAG,CAAoBD,OAAO,GAAG,MAAM,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MAC/D,IAAI,CAACC,QAAQ,GAAGD,MAAM;IACxB,CAAC,CAAC;EACJ;CACD;AAZYN,wBAAwB,eAJpCF,SAAS,CAAC;EACTU,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE;CACd,CAAC,EAM+BC,iBAAM,CAAC,UAAU,CAAC,IALtCV,wBAAwB,CAYpC;SAZYA,wBAAwB","names":["Component","Inject","ApplicationTypeComponent","constructor","http","baseUrl","get","subscribe","result","appTypes","selector","templateUrl","__param"],"sourceRoot":"","sources":["C:\\Users\\sikri\\source\\repos\\MyTestAngular\\MyTestAngular\\ClientApp\\src\\app\\applicationtype\\applicationtype.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApplicationType } from '../modal/applicationtype.mode';\r\n\r\n@Component({\r\n  selector: 'applicationtype-data',\r\n  templateUrl: './applicationtype.component.html'\r\n})\r\nexport class ApplicationTypeComponent {\r\n  public appTypes: ApplicationType[] = [];\r\n  http: HttpClient;\r\n  baseUrl: string = \"\";\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    this.http = http;\r\n    this.baseUrl = baseUrl;\r\n    http.get<ApplicationType[]>(baseUrl + 'Type').subscribe(result => {\r\n      this.appTypes = result;\r\n    });\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}